{"name":"Ifbyphone-post-call-google analytics","tagline":"PHP Class for pure server-side Google Analytics Measurement Protocol, to allow basic Google Analytics Integration on non-human-readable pages (ie, Javascript-FREE). VERY limited functions: Specifically intended for a broad, automatic capture of post-call data into GA.","body":"### Welcome IfByPhone-Post-Call-Google_Analytics\r\n\r\nThe concept of this class is to provide a Javascript-free and invisible way to register Google Analytics hits and events, without utilizing the analytics.js Javascript API. Why no Javascript? Because the idea is to track pure server-to-server API calls and interactions, which don't load or execute Javascript (or even pixels, quite often, for that matter). Although the original intent of this class is to facilitate broad data captures for Dialogtech.com (formerly IfByPhone.com) Post-Call Data sends, it is agnostic to that original purpose, and can be used for event captures using Google Analytics Measurement Protocol for any system.\r\n\r\n## The GA Dashboard View Looks Like This.\r\n\r\n![Google Analytics Display](http://i.imgur.com/fOdZn8c.png)\r\n\r\n## What is currently the standard?\r\n\r\nThe usual way that Google Analytics is integrated in websites is with the typical GA Javascript code snippets, which are inserted into a page <head> tag (or lower on the page). This consists of essentially two parts, the analytics.js (or the old ga.js) file, and a customized snipped that provides the user's Universal Analytics ID number (ie, UA-XXXXXX-XX). This process of pasting in the Google Analytics Javascript snippet is no doubt quite familiar to any web developer or webmaster. An example of the included script is the below:\r\n\r\n\r\n```\r\n<script>\r\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');\r\n\r\n  ga('create', 'UA-XXXXXXXX-X', 'auto');\r\n  ga('send', 'pageview');\r\n\r\n</script>\r\n```\r\n\r\n# This is a great system, but breaks down for users under some unique use cases/situations:\r\n\r\n1. Users running browsers that are not Javascript enabled (rare) obviously won't be able to run the client-side Javascript.\r\n\r\n2. Users who have deliberately disabled Javascript in their security settings are a growing demographic for website users. Often, for security or privacy reasons this is disabled, or simply to forcibly opt-out of advertising.\r\n\r\n3. Users working in enterprise environments where the same is done and enforced by corporate IT pros. This can create problems and usability issues, but core business apps are enabled, and ancillary things like this fall by the wayside.\r\n\r\n4. Web apps that don't actually display output to a browser (such as a silent webhook, or background process). If nothing is displayed in a browser (where the Javascript runs), no analytics is collected.\r\n\r\n5. Similarly, traffic and operations on or between web servers, such as remote fetches, API calls, etc, are effected between servers, which don't load, process, run, or interact with Javascript as a browser client would.\r\n\r\n# These last two (really just one) scenarios are the purpose of this class\r\n\r\nThe purpose of this class is to utilize the Google Analytics \"Measurement Protocol\" API ([Google Developer Pages](https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide), which allows all the parameters that would be collected via the Javascript API to be specified. Unfortunately, while these would be collected in a purely automated fashion by the Javascript API, using the Measurement Protocol requires these to be manually specified (and of course lacks access to many client-side functions that are only available to Javascript running in a user's browserâ€¦ sorry), such as many of the following:\r\n\r\n1. Browser Capabilities\r\n2. Screen size & resolution\r\n3. Latitude/Longitude, location data\r\n4. Device information, etc.\r\n\r\n# Limitations!\r\n\r\nMy own intended use of this class precludes the inclusion of a number of the functions possible, and limits itself primarily to basic event/pageview information, and general call metadata, and does nothing yet to address the following potential actions (which would require new methods to be built-out, which could be done quite simply, but I simply have no need for it). Examples include:\r\n\r\n1. Ecommerce functions: product prices, tax, totals, etc.\r\n2. Creative, content, and other functions.\r\n3. Conversion tracking, etc.\r\n\r\nIf these above items are needed, perhaps discuss some use cases with the author, fork and create your own methods (Referring to the needed values and parameters documented at in the ([Google Developer Pages](https://developers.google.com/analytics/devguides/collection/protocol/v1/devguide) for the Measurement Protocol, or perhaps simply search for a better class for your purpose on Github. It should be a simple matter, following the design pattern shown in the class: add a public method for the purpose that inserts the values into the $this->payload array (or one-offs using the `setCustomDimension($name, $value)` method.\r\n\r\n# Setup and Configuration\r\n\r\n## 1. Setup your IVR Webhook/SurVo Netget in your DialogTech Console\r\nIfByPhone.com/DialogTech.com is not a free service, and access to features (such as the ability to use web hooks in this way) are not available to all service levels. Speak with your account rep about whether you have these functions enabled. Once enabled, you can use the SurVo Post-Call Action (or comparable IVR function) to set this up. The below image is an example of the former. Exact appearance will vary with the latter:\r\n\r\n![DialogTech/IfByPhone Post-Call Action Panel Setup](http://i.imgur.com/7FjyPo2.png)\r\n\r\nIt doesn't matter what you call the parameters in the left column of this setup, but bear in mind that they will be sent using these names, and the Class will expect them as such. Call them what you please, but they must match up to the `$ga_custom_dimensions` array (detailed below) which acts as the interpreter between the data sent, and which custom dimensions it is stored as in Google Analytics. For simplicity and initial configuration, set this up exactly as shown. Once you get it, go for broke.\r\n\r\n\r\n## 2. Setup of Google Analytics Custom Dimensions\r\nIn order to match the data sent from the DialogTech Post-Call Action to your Google Analytics Custom Dimensions, you'll need to configure some. Make them look like the below image. What you call these custom dimensions is up to you: all that really matters is the **index number in the second column**: This must match the index number in the $ga_custom_dimensions array in the Class signature (or alternately, be specified using the `setCustomDimensions($array)` method), where `$array` is an array of numerical indexes matching Google Analytics Custom Dimension numbers, and the values match the names of the corresponding values passed by the DialogTech/IfByPhone Post-Call Action data send. As can be seen, this array starts at index '1' and can have up to '20' named custom dimensions (limited by Google). \r\n\r\n![Google Analytics Custom Dimensions](http://i.imgur.com/DrucqKu.png)\r\n\r\n## 3. Setup of the script on your web server.\r\nUpload the included files (the active file is only an example of how to use the methods). Include the sample file code in your script (it will integrate in a rudimentary way without editing). By default, once the ***above two steps are accomplished (GA Custom Dimensions***, the script will integrate in a basic way with Google Analytics, pushing basic data into your account. The only edit that is **REQUIRED** is the substitution of your Google Universal Analytics Property ID (UA-XXXXXXX-XX), for the placeholder in the sample file. This will use your server's settings to provide:\r\n\r\n1. Basic Required fields.\r\n2. Page, host and user data.\r\n3. Most of the information that can be automatically configured.\r\n\r\n```\r\n /* include the class file */\r\ninclude('./googleAnalyticsMeasurementProtocolEvent.php');\r\n\r\n/* Instantiate the object with your UA ID (this one is NOT valid) & optional label \r\n *  for the event (defaults to 'pageview' if omitted \r\n */\r\n$event = new googleAnalyticsMeasurementProtocolEvent('UA-XXXXXXXX-X', \"IVR Call\");\r\n\r\n/* OPTIONALLY: Specify a data source to attribute this hit to */\r\n//$event->setDataSource('DialogTech.com');\r\n\r\n/* OPTIONALLY: Specify Default behavior: Whether to listen for\r\n * input in the GET or POST array (I recommend POST, which is\r\n * the default when omitted). Note that this has nothing to do \r\n * with how the data is sent to GA: That is always a GET request.\r\n */\r\n\r\n//$event->setDefaultBehavior('GET');\r\n\r\n/* OPTIONALLY, BUT RECOMMENDED (THIS IS THE POINT OF THIS APP): Map Custom Dimensions\r\n * by either editing the $custom_dimension_map field directly, or passing in a map of your own\r\n * using the mapCustomDimensions($new_map) method.\r\n//$event->mapCustomDimensions(array $new_map);\r\n\r\n/* OPTIONALLY: Use test mode (which outputs info to the browser confirming parameters\r\n * and values sent. Otherwise, only the tracking pixel gif itself is displayed.\r\n */\r\n//$event->testMode();\r\n\r\n/* OPTIONALLY: Give this event a category, type, label, and value; This info will\r\n * be displayed in GA as your events and their labels, etc.\r\n */\r\n$event->createEventData('Lead', 'call', 'IVR Call', 50);\r\n\r\n/* OPTIONALLY, BUT RECOMMENDED: Name your utm_ parameters in an array\r\n * and add them using this method: other items in array will be ignored.\r\n * $campaign = array(\r\n *       'utm_campaign' => 'June Marketing',\r\n *       'utm_source' => 'June Postcard Mailer',\r\n *       'utm_medium' => 'Direct Mail',\r\n *       'utm_content' => 'Buy-back Offers',\r\n *       'utm_term' => 'N/A'\r\n *  );\r\n */\r\n//$event->createCampaignParameters($campaign);\r\n\r\n/* By default, payload is sent on __destruct(). If the pixel needs to be in a sensible page\r\n * structure, call the sendPayload() method directly, where you want the pixel to appear.\r\n */\r\n//$event->sendPayload();\r\n```\r\n\r\nAt script end (on Destruct), the call is made and pixel is returned (if display is irrelevant). If a page actually needs to display something in proper HTML, call the `sendPayload()` method directly (it will disable the send on `__destruct()`; in any case, it only sends once per object, and then disables itself to prevent duplicate submissions).\r\n\r\n# Troubleshooting\r\nThese are the most common configuration issues:\r\n1. GET vs. POST. All data is sent to GA via a GET request. This setting refers to where the app looks for the ***incoming data***. If you are sending it via GET, specify GET by calling the `setDefaultBehavior('GET')` method before sending the payload. If you are sending via POST, no action is needed, this is the default scenario.\r\n\r\n2. How to tell if it is working correctly? Enable test mode, which will output the pixel to a browser. You should be able to see the pixel by viewing the page source, which should tell you the size of the pixel and file type (obviously it is just one transparent pixel, so don't expect it to be easy to see). GAMP will only return a pixel if this is done right.\r\n\r\n3. How do I pass in utm_ parameters? Actually, by default, the class will look in the $_GET array for the big five UTM params, utm_campaign, utm_source, utm_medium, utm_term and utm_content. If they do not appear in the $_GET array, you can dynamically add them (or statically) by calling the createCampaignParameters() method, and passing it an associative array keyed with these param names.\r\n\r\n# Authors and Contributors\r\nThis project is maintained by Daniel Benjamin, @eshlepper, eShlepper Marketing, Inc [Automotive Marketing, Digital Advertising, Lead Generation, Direct Mail](http://www.eshlepper.com). \r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at https://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"UA-37342357-4","note":"Don't delete this file! It's used internally to help with page regeneration."}